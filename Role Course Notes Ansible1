# installing basics for ansible
sudo dnf install -y ansible ansible-navigator
podman login -u @username -p @password  <registry URL>
ansible-navigator images

# ansible.cfg
[defaults]
inventory=./inventory
roles_path=./roles
collections_path=./mycollections
vault_password_file=./secretfile.txt
ask_pass=fale

[privilege_escelation]
become=true
become_method=sudo
become_user=root
become_ask_pass=false

# SAVE TIME!!!
# use short names instead of full module path since there is no overlapping modules in our lab environment
# note this is NOT best practice at all, in the wild we shoudl always use full path name as there will be overlapping module names
#example:
  file: instead of ansible.builtin.file

# setting aliases to speedup commands
alias 'ans=ansible-navigator run -m stdout --syntax-check'
alias 'anr=ansible-navigator run -m stdout'
alias 'and=ansible-navigator doc -m stdout'
alias 'ag=ansible-galaxy'


##### conditionals #####
when: "'dev' in group_names"

when: "ansible_facts['lvm']['vgs']['@volumegroupname'] is defined"

when: "ansible_facts['lvm']['vgs']['@volumegroupname'] is not defined"

when: "inventory_hostname in groups['@inventoryfilegroupname']"


#####  users #####
when: 
  - "'@inventoryfilegroupname1' in group_names or '@inventoryfilegroupname2' in group_names"

##### roles 
- name: do this fucntion
  include_role:
    name: redhat.rhel_system_roles.storage
  vars:
    storage_pools:

##### ansible-navigator.yml
---
ansible-navigator:
  execution-environment:
    image:  <registry URL>/<image name>:<tag>
    pull:
      policy: missing

##### password hashing with filter
  "{{ pw_developer | password_hash('sha512') }}"

######  cat'in readme files for redhat system roles
cat ~/@collection directory install path/ansible_collections/redhat/rhel_system_roles/roles/@roleofinterest/README.md

###### dump collections docs out to stdtout
ansible-navigator doc ansible.builtin.file (can do short with 'file') -m stdout



##### modules/methods from Roles course i like alot and why
ansible.builtin.copy
# 'content' option lets you create a file with specific content
# copy files into locations and adjust permissions

ansible.builtin.file
# can create directorys
# can create symbolic links
# can set 'setype' for filecontext
# can set permisions include sticky bit

ansible.builtin.template
# use j2 file to create destination files populated by ansible facts with any degree of options
# can embed lops in them while creating files
        # for loops
        {% for host in groups['@inventoryfilegroupname'] %}
        "{{ hostvars[host]['ansible_facts']['@itemdesired']}}"
        {% endfor %}

# roles course principals that i really like
1) leveraging vaults to and other file lists to populate values for modules
2) installing roles and collections with requirements files instead of typing the same command over and over again




        
